/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { styled } from '@mui/material/styles';
import { FooterLink2Props } from 'types';
import { animated, useSpring, easings } from 'react-spring';
import useFooterLink2 from 'components/FooterLink2/useFooterLink2';

const Property1Default: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  height: 'auto',
  width: 'fit-content',
});

const Link1: any = animated(
  styled('div', {
    shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
  })(({ data }: any) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    color: `rgba(151, 151, 151, 1)`,
    fontStyle: `normal`,
    fontFamily: `Visby CF`,
    fontWeight: `700`,
    fontSize: `14px`,
    letterSpacing: `0px`,
    textDecoration: `none`,
    lineHeight: `24px`,
    textTransform: `none`,
    margin: `0px`,
  }))
);

const Underline: any = animated(
  styled('div', {
    shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
  })(({ data }: any) => ({
    opacity: `0`,
    backgroundColor: `rgba(151, 151, 151, 1)`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    alignSelf: `stretch`,
    height: `2px`,
    margin: `-2px 0px 0px 0px`,
    overflow: `hidden`,
  }))
);

function FooterLink2(props: FooterLink2Props): JSX.Element {
  const { data, fns } = useFooterLink2(props);

  const Link1Property1Default = { color: `rgba(151, 151, 151, 1)` };
  const Link1Property1Variant2 = { color: `rgba(255, 255, 255, 1)` };
  const [Link1StateStyles, Link1StateApi] = useSpring(() => ({
    from: eval('Link1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const UnderlineProperty1Default = {
    opacity: `0`,
    backgroundColor: `rgba(151, 151, 151, 1)`,
  };
  const UnderlineProperty1Variant2 = {
    opacity: `1`,
    backgroundColor: `rgba(255, 255, 255, 1)`,
  };
  const [UnderlineStateStyles, UnderlineStateApi] = useSpring(() => ({
    from: eval('Underline' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const switchStateToProperty1Default: (
    duration: number,
    delay: number,
    easing: string
  ) => void = (
    duration: number = 0,
    delay: number = 0,
    easing: string = 'linear'
  ) => {
    Link1StateApi.start({
      ...Link1Property1Default,
      delay,
      config: { duration, easing: easings[easing] },
    });
    UnderlineStateApi.start({
      ...UnderlineProperty1Default,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };

  const switchStateToProperty1Variant2: (
    duration: number,
    delay: number,
    easing: string
  ) => void = (
    duration: number = 0,
    delay: number = 0,
    easing: string = 'linear'
  ) => {
    Link1StateApi.start({
      ...Link1Property1Variant2,
      delay,
      config: { duration, easing: easings[easing] },
    });
    UnderlineStateApi.start({
      ...UnderlineProperty1Variant2,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };
  return (
    <Property1Default
      onMouseOut={() => {
        eval('switchStateTo' + data.previousVariant)(
          0.35 * 1000,
          0 * 1000,
          'easeOutQuart'
        );
        fns.setPreviousVariant('Property1Variant2');
        fns.setCurrentVariant(data.previousVariant);
      }}
      onMouseOver={() => {
        switchStateToProperty1Variant2(0.35 * 1000, 0 * 1000, 'easeOutQuart');
        fns.setPreviousVariant(data.currentVariant);
        fns.setCurrentVariant('Property1Variant2');
      }}
    >
      <Link1 data={data} style={{ ...Link1StateStyles }}>
        {props.text}
      </Link1>
      <Underline data={data} style={{ ...UnderlineStateStyles }}></Underline>
    </Property1Default>
  );
}

export default FooterLink2;
